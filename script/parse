#!/usr/bin/env ruby
require 'rubygems'
$:.unshift(File.expand_path(File.join(File.dirname(__FILE__), "..", 'lib')))
require "bundler/setup"
require 'rdf/rdfxml'
require 'rdf/turtle'
require 'rdf/ntriples'
require 'rdf/ordered_repo'
require 'getoptlong'
require 'logger'

def run(input, **options)
  reader_class = RDF::Reader.for(options[:input_format].to_sym)
  raise "Reader not found for #{$input_format}" unless reader_class

  start = Time.new
  num = 0

  if options[:output_format] == :ntriples || options[:quiet]
    reader_class.new(input, **options[:parser_options]).each do |statement|
      num += 1
      if options[:errors] && statement.invalid?
        $stderr.puts "Invalid statement #{statement.inspect}"
      elsif options[:quiet]
        print "." if options[:quiet] == 1
      else
        options[:output].puts statement.to_ntriples
      end
    end
  elsif options[:output_format] == :inspect
    reader_class.new(input, **options).each do |statement|
      num += 1
      options[:output].puts statement.inspect
    end
  else
    r = reader_class.new(input, **options[:parser_options])
    g = RDF::OrderedRepo.new << r
    num = g.count
    options[:output].puts g.dump(options[:output_format], prefixes:  r.prefixes, **options[:writer_options])
  end
  $stderr.puts
  secs = Time.new - start
  $stderr.puts "Parsed #{num} statements in #{secs} seconds @ #{num/secs} statements/second."
rescue Exception => e
  fname = input.respond_to?(:path) ? input.path : "-stdin-"
  $stderr.puts("Error in #{fname}: #{e.message}")
  $stderr.puts "Backtrace: " + e.backtrace.join("\n  ")
  raise e
end

logger = Logger.new(STDERR)
logger.level = Logger::WARN
logger.formatter = lambda {|severity, datetime, progname, msg| "#{severity}: #{msg}\n"}

parser_options = {
  base_uri:  nil,
  validate:  false,
  logger: logger,
}

writer_options = {
  base_uri:  nil,
  standard_prefixes:  true,
  logger: logger,
}

options = {
  parser_options:  parser_options,
  writer_options:  writer_options,
  input_format: :rdfxml,
  output_format: :ntriples,
  output: STDOUT,
  strict: true,
  validate: false,
  verbose: false,
}

input = nil

OPT_ARGS = [
  ["--canonicalize", GetoptLong::NO_ARGUMENT, "Canonize all terms"],
  ["--debug", GetoptLong::NO_ARGUMENT, "Debugging output"],
  ["--errors", GetoptLong::NO_ARGUMENT, "Display invalid statements"],
  ["--execute", "-e", GetoptLong::REQUIRED_ARGUMENT, "Run against source in argument"],
  ["--format", GetoptLong::REQUIRED_ARGUMENT, "Output format, any RDF format symbol, sxp, or inspect"],
  ["--help", "-?", GetoptLong::NO_ARGUMENT, "print this message"],
  ["--input-format", GetoptLong::REQUIRED_ARGUMENT, "Format of the input file, defaults to ttl"],
  ["--info", GetoptLong::NO_ARGUMENT, "Show progress on execution"],
  ["--output", "-o", GetoptLong::REQUIRED_ARGUMENT, "Save output to file"],
  ["--quiet", GetoptLong::NO_ARGUMENT, "Do not show parser output"],
  ["--stream", GetoptLong::NO_ARGUMENT, "Use streaming writer"],
  ["--template", GetoptLong::REQUIRED_ARGUMENT, "Haml template for writer"],
  ["--uri", GetoptLong::REQUIRED_ARGUMENT, "Default base URI"],
  ["--validate", GetoptLong::NO_ARGUMENT, "Run parser in strict validation mode"],
  ["--verbose", GetoptLong::NO_ARGUMENT, "Verbose output"],
]

def usage
  STDERR.puts %{
    RDF::RDFXML version #{RDF::RDFXML::VERSION}
    
    Usage: #{$0} [options] file ...
  }.gsub(/^    /, '')
  width = OPT_ARGS.map do |o|
    l = o.first.length
    l += o[1].length + 2 if o[1].is_a?(String)
    l
  end.max
  OPT_ARGS.each do |o|
    s = "  %-*s  " % [width, (o[1].is_a?(String) ? "#{o[0,2].join(', ')}" : o[0])]
    s += o.last
    STDERR.puts s
  end
  exit(1)
end

opts = GetoptLong.new(*OPT_ARGS.map {|o| o[0..-2]})

opts.each do |opt, arg|
  case opt
  when '--debug'        then logger.level = Logger::DEBUG
  when '--canonicalize' then parser_options[:canonicalize] = true
  when '--errors'       then options[:errors] = true
  when '--execute'      then input = arg
  when '--format'       then options[:output_format] = arg.to_sym
  when "--help"         then usage()
  when '--input-format' then options[:input_format] = arg.to_sym
  when '--output'       then options[:output] = File.open(arg, "w")
  when '--rdfstar'      then parser_options[:rdfstar] = true
  when '--quiet'
    options[:quiet] = options[:quiet].to_i + 1
    logger.level = Logger::FATAL
  when '--template'     then options[:haml] = arg.to_sym
  when '--uri'          then parser_options[:base_uri] = writer_options[:base_uri] = arg
  when '--validate'     then parser_options[:validate] = true
  when '--verbose'      then options[:verbose] = true
  when '--version'      then options[:version] = arg
  end
end

if ARGV.empty?
  s = input ? input : $stdin.read
  run(StringIO.new(s), **options)
else
  ARGV.each do |test_file|
    run(Kernel.open(test_file), **options)
  end
end
puts
